--- a/rng/unix/mc_getrandom_stubs.c	2022-10-02 19:44:53.000000000 -0700
+++ b/rng/unix/mc_getrandom_stubs.c	2022-10-02 20:41:42.000000000 -0700
@@ -30,16 +30,13 @@
 // on BSD and macOS, loop (in pieces of 256) getentropy
 #if defined(__APPLE__)
 // on macOS, getentropy is defined in sys/random.h (on BSD in unistd.h)
-#include <sys/random.h>
+#include <Security/SecRandom.h>
 #endif
 #include <sys/param.h>

 void raw_getrandom (uint8_t *data, uint32_t len) {
-  int rlen = 0;
-  for (int i = 0; i <= len; i += 256) {
-    rlen = MIN(256, len - i);
-    if (getentropy(data + i, rlen) < 0) uerror("getentropy", Nothing);
-  }
+  int status = SecRandomCopyBytes(kSecRandomDefault, len, data);
+  if (status != errSecSuccess) uerror("SecRandomCopyBytes", Nothing);
 }
 #elif (defined(_WIN32))
 /* There is a choice between using RtlGenRandom and BCryptGenRandom
